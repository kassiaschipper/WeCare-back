generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model doctors {
  id                  Int                   @id @default(autoincrement())
  name                String
  medicalSpecialtyId  Int
  address             String?
  phone               String                @db.VarChar(11)
  medicalSpecialty    medicalSpecialty      @relation(fields: [medicalSpecialtyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medicalAppointments medicalAppointments[]
  prescription        prescription[]
}

model healthInsurance {
  id           Int           @id @default(autoincrement())
  name         String
  category     String?
  phone        String?       @db.VarChar(11)
  personalCode Int?
  personCared  personCared[]
}

model illness {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  comments    String?
  symptomsId  Int?
  symptoms    symptoms?     @relation(fields: [symptomsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  personCared personCared[]
}

model medicalAppointments {
  id            Int         @id(map: "medicalappointments_pkey") @default(autoincrement())
  doctorId      Int
  comments      String?
  status        String      @default("Consulta Marcada")
  date          DateTime    @default(now()) @db.Timestamptz(6)
  personCaredId Int
  personCared   personCared @relation(fields: [personCaredId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctors       doctors     @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "medicalappointments_doctorId_fkey")
}

model medicalSpecialty {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  doctors doctors[]
}

model medications {
  id           Int            @id @default(autoincrement())
  name         String
  dosage       String         @db.VarChar(30)
  interval     String         @db.VarChar(30)
  medicineBox  medicineBox[]
  prescription prescription[]
}

model medicineBox {
  id           Int         @id @default(autoincrement())
  medicationId Int
  quantity     String?     @db.VarChar(255)
  toBuy        String?     @default("No") @db.VarChar(3)
  medications  medications @relation(fields: [medicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model personCared {
  id                  Int                   @id(map: "patient_pkey") @default(autoincrement())
  name                String
  image               String?
  birthdayDate        DateTime              @db.Timestamp(6)
  weight              Decimal?              @db.Decimal
  height              Decimal?              @db.Decimal
  healthInsuranceId   Int?
  illnessId           Int?
  medicalAppointments medicalAppointments[]
  healthInsurance     healthInsurance?      @relation(fields: [healthInsuranceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_healthInsuranceId_fkey")
  illness             illness?              @relation(fields: [illnessId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_illnessId_fkey")
  prescription        prescription[]
}

model prescription {
  id            Int         @id @default(autoincrement())
  doctorId      Int
  medicationId  Int
  personCaredId Int
  doctors       doctors     @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medications   medications @relation(fields: [medicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  personCared   personCared @relation(fields: [personCaredId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id       Int      @id @default(autoincrement())
  userId   Int
  token    String
  createAt DateTime @default(now()) @db.Timestamptz(6)
  users    users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model symptoms {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  startDate DateTime  @default(dbgenerated("'2023-01-26 23:28:13.862107'::timestamp without time zone")) @db.Timestamp(6)
  endDate   DateTime? @db.Timestamp(6)
  illness   illness[]
}

model users {
  id           Int       @id @default(autoincrement())
  name         String
  relationship String?
  email        String    @unique
  password     String
  session      session[]
}

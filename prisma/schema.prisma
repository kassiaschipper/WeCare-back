generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model doctors {
  id                  Int                   @id @default(autoincrement())
  name                String
  medicalSpecialtyId  Int
  address             String?
  phone               String                @db.VarChar(11)
  medicalSpecialty    medicalSpecialty      @relation(fields: [medicalSpecialtyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medicalappointments medicalappointments[]
  prescription        prescription[]
}

model healthInsurance {
  id           Int       @id @default(autoincrement())
  name         String
  category     String?
  phone        String?   @db.VarChar(11)
  personalCode Int?
  patient      patient[]
}

model illness {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  comments   String?
  symptomsId Int?
  symptoms   symptoms? @relation(fields: [symptomsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient    patient[]
}

model medicalSpecialty {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  doctors doctors[]
}

model medications {
  id           Int            @id @default(autoincrement())
  name         String
  dosage       String         @db.VarChar(30)
  interval     String         @db.VarChar(30)
  medicineBox  medicineBox[]
  prescription prescription[]
}

model medicineBox {
  id           Int         @id @default(autoincrement())
  medicationId Int
  quantity     String?     @db.VarChar(255)
  toBuy        String?     @default("No") @db.VarChar(3)
  medications  medications @relation(fields: [medicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id                  Int                   @id @default(autoincrement())
  name                String
  image               String?
  birthdayDate        DateTime              @db.Timestamp(6)
  weight              Decimal?              @db.Decimal
  height              Decimal?              @db.Decimal
  healthInsuranceId   Int?
  illnessId           Int?
  medicalappointments medicalappointments[]
  healthInsurance     healthInsurance?      @relation(fields: [healthInsuranceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  illness             illness?              @relation(fields: [illnessId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prescription        prescription[]
  users               users[]
}

model prescription {
  id           Int         @id @default(autoincrement())
  doctorId     Int
  medicationId Int
  patientId    Int
  doctors      doctors     @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medications  medications @relation(fields: [medicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient      patient     @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model symptoms {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  startDate DateTime  @default(dbgenerated("'2023-01-24 11:13:38.657613'::timestamp without time zone")) @db.Timestamp(6)
  endDate   DateTime? @db.Timestamp(6)
  illness   illness[]
}

model users {
  id           Int      @id @default(autoincrement())
  name         String
  image        String?
  relationship String?
  patientId    Int?
  patient      patient? @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model medicalappointments {
  id        Int      @id @default(autoincrement())
  patientId Int
  doctorId  Int
  comments  String?
  status    String   @default("Consulta Marcada")
  date      DateTime @default(now()) @db.Timestamptz(6)
  doctors   doctors  @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient   patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
